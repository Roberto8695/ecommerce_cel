generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model brands {
  brand_id Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(100)
  logo_url String?    @db.VarChar(255)
  products products[]
}

model cart {
  cart_id    Int          @id @default(autoincrement())
  user_id    Int
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  users      users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  cart_items cart_items[]
}

model cart_items {
  cart_item_id Int       @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int       @default(1)
  added_at     DateTime? @default(now()) @db.Timestamp(6)
  cart         cart      @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade, onUpdate: NoAction)
  products     products  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
}

model categories {
  category_id Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(100)
  description String?
  products    products[]
}

model order_items {
  order_item_id Int      @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  orders        orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)
  products      products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  order_id    Int           @id @default(autoincrement())
  user_id     Int
  total       Decimal       @db.Decimal(10, 2)
  status      String?       @default("pending") @db.VarChar(50)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  order_items order_items[]
  users       users         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model product_images {
  image_id   Int      @id @default(autoincrement())
  product_id Int
  image_url  String   @db.VarChar(255)
  is_primary Boolean? @default(false)
  products   products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
}

model product_specs {
  spec_id    Int      @id @default(autoincrement())
  product_id Int
  spec_name  String   @db.VarChar(100)
  spec_value String   @db.VarChar(100)
  products   products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
}

model products {
  product_id     Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String?
  brand_id       Int
  category_id    Int
  price          Decimal          @db.Decimal(10, 2)
  stock          Int?             @default(0)
  is_active      Boolean?         @default(true)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  cart_items     cart_items[]
  order_items    order_items[]
  product_images product_images[]
  product_specs  product_specs[]
  brands         brands           @relation(fields: [brand_id], references: [brand_id], onDelete: NoAction, onUpdate: NoAction)
  categories     categories       @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  reviews        reviews[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id  Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  rating     Int?
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id       Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(255)
  password_hash String    @db.VarChar(255)
  first_name    String?   @db.VarChar(100)
  last_name     String?   @db.VarChar(100)
  address       String?
  phone         String?   @db.VarChar(20)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  cart          cart[]
  orders        orders[]
  reviews       reviews[]
}
